import org.gradle.internal.os.OperatingSystem

import java.text.SimpleDateFormat

description = "Root project of the Commons project of the Gradle Tooling Platform."

group = 'com.gradleware.tooling'
version = '1.0.0-' + new SimpleDateFormat("yyyyMMddkkmmssZ").format(new Date())

wrapper.gradleVersion = '2.2'

subprojects {

  group = rootProject.group
  version = rootProject.version

  // add required repositories for external dependencies
  repositories {
    jcenter()
    maven {
      name = 'gradle-public-snapshots'
      url gradlePublicSnapshotsRepositoryUrl
    }
  }

  // fail eagerly on version conflict (includes transitive dependencies) and enforce certain dependency versions
  configurations.all {
    resolutionStrategy {
      failOnVersionConflict()

      forcedModules = [
              "junit:junit-dep:4.11",           // spock uses junit-dep 4.10
              "org.hamcrest:hamcrest-core:1.3"  // junit uses hamcrest 1.1
      ]
    }
  }

  // apply Java plugin (production code) and Groovy plugin (test code)
  apply plugin: 'groovy'

  // make sure it compiles and runs with Java 6
  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  // 1) convert all compiler warnings to errors
  // 2) fork the compilation
  // 3) on Mac OS, use the correct compiler version (rather than just working with the compatibility flags)
  tasks.withType(AbstractCompile).all {
    options.compilerArgs << '-Xlint:all' << '-Werror'
    options.fork = true
    if (OperatingSystem.current().isMacOsX()) {
      options.forkOptions.executable = "/usr/libexec/java_home -v $targetCompatibility".execute().text.trim() + "/bin/javac"
    }
  }

  // make sure the main resources folder is always generated in the build directory, otherwise 'compileTestGroovy' issues a warning
  task mainResourcesDir << { sourceSets.main.output.resourcesDir.mkdirs() }
  processResources.dependsOn mainResourcesDir

  // bundle sources
  task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
  }

  // generate javadoc as part of the build once all tests have passed
  build.dependsOn javadoc
  javadoc.shouldRunAfter check

  // configure publications
  apply plugin: 'maven-publish'

  // publish to private Gradleware repository
  publishing {
    repositories {
      maven {
        name = 'gradle-private'
        url gradlePrivateRepositoryUrl
        credentials {
          username GRADLE_REPO_USER
          password GRADLE_REPO_PASSWORD
        }
      }
    }
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar {
          classifier "sources"
        }
      }
    }
  }

  // allow to
  //  - run cross-version tests in 'domain' sub-project by mapping the relevant system property from the project properties to the forked test process
  //  - run cross-version tests in embedded mode in 'domain' sub-project by passing the relevant system property from the project properties to the forked test process
  if (path in [':domain']) {
    tasks.withType(Test).all {
      def propertyKeyVersions = 'com.gradleware.tooling.integtest.versions'
      if (project.properties.containsKey(propertyKeyVersions)) {
        systemProperty propertyKeyVersions, project.properties.get(propertyKeyVersions)
      }
      def propertyKeyEmbedded = 'com.gradleware.tooling.integtest.embedded'
      if (project.properties.containsKey(propertyKeyEmbedded)) {
        systemProperty propertyKeyEmbedded, project.properties.get(propertyKeyEmbedded)
      }
      maxParallelForks = 1
    }
  }

}
